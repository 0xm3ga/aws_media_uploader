AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless application that receives and stores user-uploaded images and videos.

Parameters:
  RawMediaBucketName:
    Type: String
    Description: Media bucket name

  ProcessedMediaBucketName:
    Type: String
    Description: Media bucket name

  MainUserPoolId:
    Type: String
    Description: Media user pool id

  MainUserPoolArn:
    Type: String
    Description: Media user pool arn

  MediaDomainName:
    Type: String
    Description: Media Domain Name

Resources:
  # Lambda layers
  AwsUtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: AwsUtilsLayer-API
      Description: Layer that contains common aws utils (like boto3)
      ContentUri: src/layers/aws_utils_layer/
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  # API Gateway
  PbsApi:
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration:
        Type: REGIONAL
      StageName: Prod
      BinaryMediaTypes:
        - "*/*"
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./api-spec/bundled.yaml
      Auth:
        DefaultAuthorizer: MainCognitoAuthorizer
        Authorizers:
          MainCognitoAuthorizer:
            UserPoolArn: !Ref MainUserPoolArn

  # Lambda
  UploadMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/upload_media_function/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 10
      Layers:
        - !Ref AwsUtilsLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref RawMediaBucketName
      Environment:
        Variables:
          RAW_MEDIA_BUCKET: !Ref RawMediaBucketName
      Events:
        Upload:
          Type: Api
          Properties:
            Path: /upload
            Method: post
            RestApiId:
              Ref: PbsApi

  RetrieveMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/retrieve_media_function/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 20
      Layers:
        - !Ref AwsUtilsLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource:
                - !Sub "arn:aws:s3:::${ProcessedMediaBucketName}"
                - !Sub "arn:aws:s3:::${RawMediaBucketName}"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:HeadObject
              Resource:
                - !Sub "arn:aws:s3:::${ProcessedMediaBucketName}/*"
                - !Sub "arn:aws:s3:::${RawMediaBucketName}/*"
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - arn:aws:lambda:us-east-1:149501512243:function:aws-media-uploader-example-ImageProcessingFunction-vQK9O3NUU81c
      Environment:
        Variables:
          MEDIA_DOMAIN_NAME: !Ref MediaDomainName
          PROCESSED_MEDIA_BUCKET: !Ref ProcessedMediaBucketName
          RAW_MEDIA_BUCKET: !Ref RawMediaBucketName
      Events:
        RetrieveMedia:
          Type: Api
          Properties:
            Path: /media/{filename}
            Method: get
            RestApiId:
              Ref: PbsApi
            Auth:
              Authorizer: NONE

Outputs:
  PbsApiIdOutput:
    Description: Pbs API ID Output
    Value: !Ref PbsApi
  PbsApiStageOutput:
    Description: API Docs S3 bucket
    Value: !Ref PbsApi.Stage
