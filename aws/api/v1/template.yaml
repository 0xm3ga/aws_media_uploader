AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless application that receives and stores user-uploaded images and videos.

Parameters:
  RawMediaBucketName:
    Type: String
    Description: Media bucket name

  ProcessedMediaBucketName:
    Type: String
    Description: Media bucket name

  MainUserPoolId:
    Type: String
    Description: Media user pool id

  MainUserPoolArn:
    Type: String
    Description: Media user pool arn

Resources:
  # Lambda layers
  AwsUtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: AwsUtilsLayer-API
      Description: Layer that contains common aws utils (like boto3)
      ContentUri: src/layers/aws_utils_layer/
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  # Lambda
  # ImageProcessingFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: src/lambdas/image_processing_function/
  #     Handler: app.lambda_handler
  #     Runtime: python3.9
  #     Layers:
  #       - !Ref AwsUtilsLayer
  #     Policies:
  #       - S3ReadPolicy:
  #           BucketName: !Ref RawMediaBucketName
  #       - S3CrudPolicy:
  #           BucketName: !Ref ProcessedMediaBucketName
  #     Environment:
  #       Variables:
  #         PROCESSED_MEDIA_BUCKET: !Ref ProcessedMediaBucketName

  # VideoProcessingFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: src/lambdas/video_processing_function/
  #     Handler: app.lambda_handler
  #     Runtime: python3.9
  #     Layers:
  #       - !Ref AwsUtilsLayer
  #     Policies:
  #       - S3ReadPolicy:
  #           BucketName: !Ref RawMediaBucketName
  #       - S3CrudPolicy:
  #           BucketName: !Ref ProcessedMediaBucketName
  #     Environment:
  #       Variables:
  #         PROCESSED_MEDIA_BUCKET: !Ref ProcessedMediaBucketName

  # MediaProcessingDispatcher:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: src/lambdas/media_processing_dispatcher/
  #     Handler: app.lambda_handler
  #     Runtime: python3.9
  #     Layers:
  #       - !Ref AwsUtilsLayer
  #     Policies:
  #       - S3ReadPolicy:
  #           BucketName: !Ref RawMediaBucketName
  #       - S3CrudPolicy:
  #           BucketName: !Ref ProcessedMediaBucketName
  #     Environment:
  #       Variables:
  #         IMAGE_PROCESSING_FUNCTION_NAME: !Ref ImageProcessingFunction
  #         VIDEO_PROCESSING_FUNCTION_NAME: !Ref VideoProcessingFunction
  #         RDS_SECRET_NAME: your-rds-secret-name

  # # Permissions
  # RawMediaBucketEventPermission:
  #   Type: AWS::Lambda::Permission
  #   DependsOn:
  #     - MediaProcessingDispatcher
  #   Properties:
  #     Action: lambda:invokeFunction
  #     SourceAccount: !Ref AWS::AccountId
  #     FunctionName: !Ref MediaProcessingDispatcher
  #     SourceArn: !Sub "arn:aws:s3:::${RawMediaBucketName}"
  #     Principal: s3.amazonaws.com

  # # Buckets
  # RawMediaBucket:
  #   Type: AWS::S3::Bucket
  #   DependsOn:
  #     - MediaProcessingDispatcher
  #     - RawMediaBucketEventPermission
  #   Properties:
  #     BucketName: !Ref RawMediaBucketName
  #     NotificationConfiguration:
  #       LambdaConfigurations:
  #         - Function: !GetAtt MediaProcessingDispatcher.Arn
  #           Event: s3:ObjectCreated:*

  # ProcessedMediaBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Ref ProcessedMediaBucketName
  #     LifecycleConfiguration:
  #       Rules:
  #         - Id: DeleteAfter30Days
  #           Status: Enabled
  #           ExpirationInDays: 30

  # API Gateway
  MediaApi:
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration:
        Type: REGIONAL
      StageName: Prod
      BinaryMediaTypes:
        - "*/*"
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./api-spec/bundled.yaml
      Auth:
        DefaultAuthorizer: MainCognitoAuthorizer
        Authorizers:
          MainCognitoAuthorizer:
            UserPoolArn: !Ref MainUserPoolArn

  # Lambda
  UploadMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/upload_media_function/
      Handler: app.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref AwsUtilsLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref RawMediaBucketName
      Environment:
        Variables:
          RAW_MEDIA_BUCKET: !Ref RawMediaBucketName
      Events:
        Upload:
          Type: Api
          Properties:
            Path: /upload
            Method: post
            RestApiId:
              Ref: MediaApi

  RetrieveMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/retrieve_media_function/
      Handler: app.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref AwsUtilsLayer
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref ProcessedMediaBucketName
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          PROCESSED_MEDIA_BUCKET: !Ref ProcessedMediaBucketName
      Events:
        RetrieveMedia:
          Type: Api
          Properties:
            Path: /media/{filename}
            Method: get
            RestApiId:
              Ref: MediaApi
            Auth:
              Authorizer: NONE

Outputs:
  MediaApiIdOutput:
    Description: Media API ID Output
    Value: !Ref MediaApi
  MediaApiStageOutput:
    Description: API Docs S3 bucket
    Value: !Ref MediaApi.Stage
