openapi: 3.0.1
info:
  title: Bluecollarverse Media API
  description: Meida API for the project
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://media.bluecollarverse.com
paths:
  /media/{filename}:
    get:
      tags:
        - Media
      summary: Retrieve media from S3
      description: Retrieve media (photos and video) from an S3 bucket
      operationId: retrieveMedia
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
          description: Filename of the media to retrieve
        - name: size
          in: query
          required: false
          schema:
            type: string
          description: Optional size of the media to retrieve
      responses:
        '200':
          description: Media successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mediaRetrieveResponse'
        '400':
          description: Bad Request, usually due to invalid parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: File not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: External service unavailable or request rejected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '504':
          description: Request to external service timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RetrieveMediaFunction.Arn}/invocations
  /upload:
    post:
      tags:
        - Media
      summary: Uploads media into S3
      description: Uploads media (photos and video) into an S3 bucket
      operationId: mediaUpload
      requestBody:
        $ref: '#/components/requestBodies/uploadRequestBody'
      responses:
        '201':
          description: Media successfully uploaded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mediaUploadResponse'
        '400':
          description: Bad Request, usually due to invalid event data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: External service unavailable or request rejected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '504':
          description: Request to external service timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadMediaFunction.Arn}/invocations
components:
  securitySchemes:
    MainCognitoAuthorizer:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://<your-cognito-domain>/oauth2/authorize
          tokenUrl: https://<your-cognito-domain>/oauth2/token
          scopes: {}
  schemas:
    mediaRetrieveResponse:
      type: object
      properties:
        statusCode:
          type: integer
          description: The HTTP status code of the response.
        headers:
          type: object
          description: Headers to provide with the HTTP response.
          properties:
            Content-Type:
              type: string
              description: The MIME type of the response body.
        body:
          type: string
          description: The base64-encoded image.
        isBase64Encoded:
          type: boolean
          description: Whether or not the body is base64-encoded.
      required:
        - statusCode
        - headers
        - body
        - isBase64Encoded
    error:
      title: Error
      type: object
      description: Object representing an error.
      required:
        - error
      properties:
        error:
          type: string
          description: A human-readable message providing more details about the error.
          example: Internal service error.
    mediaUploadResponse:
      type: object
      properties:
        url:
          type: string
          description: URL where the uploaded file can be accessed.
        id:
          type: string
          description: Unique identifier for the uploaded file.
        fileName:
          type: string
          description: The original name of the uploaded file.
        fileSize:
          type: integer
          description: The size of the uploaded file in bytes.
        fileType:
          type: string
          description: The type of the uploaded file.
      required:
        - url
        - id
        - fileName
        - fileSize
        - fileType
  requestBodies:
    uploadRequestBody:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              file:
                type: string
                format: binary
      required: true
