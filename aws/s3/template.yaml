AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: S3 buckets infrastructure

Parameters:
  RootHostedZone:
    Type: String
    Description: Root Hosted Zone

  MediaDomainName:
    Type: String
    Description: Media domain name

  RawMediaBucketName:
    Type: String
    Description: Media bucket name

  ProcessedMediaBucketName:
    Type: String
    Description: Media bucket name

  MyDatabaseName:
    Type: String
    Description: My Database Name
    Default: MyDatabaseName

  MyDatabaseUser:
    Type: String
    Description: My Database User
    Default: MyDatabaseUser

  MyDatabasePassword:
    Type: String
    Description: My Database Password
    Default: MyDatabasePassword

  MyDatabaseHost:
    Type: String
    Description: My Database Host
    Default: MyDatabaseHost

  MyDatabasePort:
    Type: String
    Description: My Database Port
    Default: MyDatabasePort

Resources:
  # Certificates
  PbsCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref MediaDomainName
      ValidationMethod: DNS

  # Lambda layers
  AwsUtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: AwsUtilsLayer-S3
      Description: Layer that contains common aws utils (like boto3)
      ContentUri: src/layers/aws_utils_layer/
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  # Lambdas
  ImageProcessingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/image_processing_function/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 60
      Layers:
        - !Ref AwsUtilsLayer
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref RawMediaBucketName
        - S3CrudPolicy:
            BucketName: !Ref ProcessedMediaBucketName
      Environment:
        Variables:
          PROCESSED_MEDIA_BUCKET: !Ref ProcessedMediaBucketName

  VideoProcessingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/video_processing_function/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 60
      Layers:
        - !Ref AwsUtilsLayer
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref RawMediaBucketName
        - S3CrudPolicy:
            BucketName: !Ref ProcessedMediaBucketName
      Environment:
        Variables:
          PROCESSED_MEDIA_BUCKET: !Ref ProcessedMediaBucketName

  MediaProcessingDispatcher:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/media_processing_dispatcher/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 30
      Layers:
        - !Ref AwsUtilsLayer
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref RawMediaBucketName
        - S3CrudPolicy:
            BucketName: !Ref ProcessedMediaBucketName
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "lambda:InvokeFunction"
              Resource:
                - !GetAtt ImageProcessingFunction.Arn
                - !GetAtt VideoProcessingFunction.Arn
                - !GetAtt RecordMediaMetadataFunction.Arn
      Environment:
        Variables:
          IMAGE_PROCESSING_FUNCTION_ARN: !GetAtt ImageProcessingFunction.Arn
          VIDEO_PROCESSING_FUNCTION_ARN: !GetAtt VideoProcessingFunction.Arn
          RECORD_MEDIA_METADATA_FUNCTION_ARN: !GetAtt RecordMediaMetadataFunction.Arn

  RecordMediaMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/record_media_metadata_function/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 60
      Layers:
        - !Ref AwsUtilsLayer
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - rds:DescribeDBInstances
                - rds-data:ExecuteStatement
                - rds-data:BatchExecuteStatement
              Resource: "*" # Adjust to your needs
      Environment:
        Variables:
          DB_NAME: !Ref MyDatabaseName
          DB_USER: !Ref MyDatabaseUser
          DB_PASSWORD: !Ref MyDatabasePassword
          DB_HOST: !Ref MyDatabaseHost
          DB_PORT: !Ref MyDatabasePort

  # Permissions
  RawMediaBucketEventPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MediaProcessingDispatcher
    Properties:
      Action: lambda:invokeFunction
      SourceAccount: !Ref AWS::AccountId
      FunctionName: !Ref MediaProcessingDispatcher
      SourceArn: !Sub "arn:aws:s3:::${RawMediaBucketName}"
      Principal: s3.amazonaws.com

  # Buckets
  RawMediaBucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - MediaProcessingDispatcher
      - RawMediaBucketEventPermission
      - RecordMediaMetadataFunction
    Properties:
      BucketName: !Ref RawMediaBucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt MediaProcessingDispatcher.Arn
            Event: s3:ObjectCreated:*

  ProcessedMediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ProcessedMediaBucketName
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfter30Days
            Status: Enabled
            ExpirationInDays: 30

  MediaCloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access S3 bucket content only through CloudFront

  MediaCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: True
        Aliases:
          - !Ref MediaDomainName
        Origins:
          - DomainName: !GetAtt ProcessedMediaBucket.DomainName
            Id: ProcessedMedia
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${MediaCloudFrontOriginAccessIdentity.Id}
        DefaultCacheBehavior:
          TargetOriginId: ProcessedMedia
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: "none"
        ViewerCertificate:
          AcmCertificateArn: !Ref PbsCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        HttpVersion: "http2"

  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref ProcessedMediaBucket
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${ProcessedMediaBucket}/*"
            Principal:
              CanonicalUser: !GetAtt MediaCloudFrontOriginAccessIdentity.S3CanonicalUserId

  # Record Set
  PbsApiRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref RootHostedZone
      Name: !Ref MediaDomainName
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront Hosted Zone ID
        DNSName: !GetAtt MediaCloudFrontDistribution.DomainName
